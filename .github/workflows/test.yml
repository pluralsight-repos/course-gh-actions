# This is a workflow for testing our FastAPI application

name: FastAPI CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events for the "main" branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # schedule:
  #   - cron: '*/5 * * * *'
  # workflow_dispatch: # Allows you to manually trigger the workflow from the Actions tab

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Test job
  test:
    runs-on: ubuntu-latest
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run tests
      - name: Run tests with pytest
        run: |
          pytest test_main.py -v

      # Test API health check
      - name: Start API and test health endpoint
        run: |
          # Start the API in the background
          python main.py &
          sleep 10
          # Test health endpoint
          curl -f http://localhost:8000/health || exit 1
          # Test root endpoint
          curl -f http://localhost:8000/ || exit 1

  # Build Docker image (optional)
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          docker build -t fastapi-app:latest .
          
      - name: Test Docker image
        run: |
          # Run container in background
          docker run -d -p 8000:8000 --name test-container fastapi-app:latest
          sleep 10
          # Test health endpoint
          curl -f http://localhost:8000/health || exit 1
          # Clean up
          docker stop test-container
          docker rm test-container
